Cleaned up the command-line validation in Fit tests.

I was hesitating between =check= and =reject= and =ensure= rows, but I came up
with a system.  I use =ensure= rows to show good, valid command-lines and
=reject= to show broken command-lines.  I ended up using =check= for switches
=-echo=, =-help=, and =-version= because while they are allowed command-lines,
they do not lead to running the application but short-circuit it instead.

I've been having trouble with =OOMetrics= lately.  When I use the =-csv= switch
and save the output with the =-out= switch, the value of the =-out= switch is
taken as the prefix for the multiple output files, one for each of project,
group, class, and method metrics.  Since the output stream is opened by the
=Command= superclass, it doesn't know that it has a special meaning in
=OOMetrics= and creates a file named after the prefix during application
startup.  But that file is never used and ends up being empty.

I encapsulated =Command.out= behind a getter and a setter so I can do lazy
initialization on it.  This way, since =OOMetrics= never calls
=Command.getOut()=, the empty file is never created.

Amended the tech docs to add Google Docs to the list of possible consumers for
CSV files.
