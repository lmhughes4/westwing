Redesigning the =Classfile= hierarchy is proving more complex than I even
thought.  For now, the easiest thing to do is for me to just add constants with
values that need escaping in =ModifiedPackage.ModifiedClass= in the
=JarJarDiff= test data folder and write tests that read =.class= files from the
filesystem.  I'll revisit jMock or EasyMock for something else at some other
time.

I modified =ClassReport= to be a =com.jeantessier.classreader.Visitor= so I can
use double dispatch to escape string values but not numeric values.  It makes
more sense to have a specific visitor choose the proper rendering based on the
output format than to blindly assume one.  Still, =Report= and =ClassReport=
both join two responsibilities: organizing differences and rendering them in
XML.  These should be split into separate classes, which would open the door to
rendering the reports in something other than XML without the need for XSLT.

Refactored the =RemovableDifferences= hierarchy.  The concrete classes used
protected setters to save values in the state of the superclass.  Instead, I
made the getters abstract so each subclass can implement it based on its own
state instead of polluting the state of the superclass.  This way, I could get
rid of the setters altogether.  Some of these getters, such as
=ClassDifferences.get(Old|New)Declaration()= and
=FeatureDifferences.get(Old|New)Declaration()=, are now slightly less efficient
but I hope it won't impact overall performance too much.

Refactored =com.jeantessier.classreader.TestXMLPrinter= to use XPath
expressions to test the contents of the generated XML.  Since it already loaded
and processed the test data folder for =JarJarDiff=, it indirectly tests the
proper escaping of special characters.  I find that I don't need to encode '"'
or ''' since all string values are in the body of tags and never in attributes.
The only exception is the name of custom attributes and I doubt these will use
quotes or apostrophes.
