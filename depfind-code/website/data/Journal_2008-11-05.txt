Added visitor hooks for the substructures in =*Annotations_attribute=.

I've been thinking to move the =com.jeantessier.classreader.Visitor= hierarchy
to use more composition.  I could have one class handle traversal of the
=Classfile= structure and delegate processing to another class that would just
focus on what needs to be done.

[[../images/Visitor_Composition.gif]]

For instance, the =visitMethod%5Finfo()= methods would look like:

    public class *VisitorDecorator* implements Visitor {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            delegate.visitMethod%5Finfo(method);
        }
    }

    public class *TraversalVisitor* extends VisitorDecorator {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            super.visitMethod%5Finfo(method);
            for(Attribute_info attribute : method.getAttributes()) {
                attribute.accept(this);
            }
        }
    }

    public class *TextPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            append("    ").append(method.getDeclaration()).append(";").eol();
        }
    }

But it does not work for =XmlPrinter=, which must generate output both before
and after processing the method's attributes.

    public class *XmlPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            append("    &lt;method&gt;").eol();
            append("        &lt;declaration&gt;").append(method.getDeclaration()).append("&lt;/declaration&gt;").eol();
            // Attributes go here, somehow
            append("    &lt;/method&gt;").eol();
        }
    }

I could have hooks for pre- and post-traversal, but that's what led to all the
complexity in =com.jeantessier.dependency.VisitorBase=.  So, I'm going to stick
with the inheritance-based design:

[[../images/Visitor_Inheritance.gif]]

Now, the code looks like this:

    public class *VisitorBase* implements Visitor {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            for(Attribute_info attribute : method.getAttributes()) {
                attribute.accept(this);
            }
        }
    }

    public class *TextPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            append("    ").append(method.getDeclaration()).append(";").eol();
            super.visitMethod%5Finfo(method);
        }
    }

and for =XmlPrinter=:

    public class *XmlPrinter* extends Printer {
        public void *visitMethod%5Finfo*(Method%5Finfo method) {
            append("    &lt;method&gt;").eol();
            append("        &lt;declaration&gt;").append(method.getDeclaration()).append("&lt;/declaration&gt;").eol();
            super.visitMethod%5Finfo(method);
            append("    &lt;/method&gt;").eol();
        }
    }

Maybe I should revisit =com.jeantessier.dependency.VisitorBase=, now.
