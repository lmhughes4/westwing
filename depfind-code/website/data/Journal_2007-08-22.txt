Tried to use [[http://easymock.org/][EasyMock]] instead of
[[http://jmock.org/][jMock]].  Whereas jMock can infer decent default return
values for methods, such as =false= for a boolean or =""= for a string, I have
to specify everything explicitly with EasyMock.  And it seems to have issues
with =toString()= too.  I might as well stick with jMock for now.

Lessons learned:

Lesson 1: don't put overly complex logic in =toString()=.  Tools like debuggers
rely on it to display feedback, so if there is a bug in =toString()=, it will
cripple your debugger.  =ClassReport.toString()= does *all* the XML formatting,
and that is a bad thing.

Lesson 2: mock object frameworks like jMock and EasyMock are of no help when
the path you are mocking uses double dispatch in the middle of it.  I haven't
found a way to tell the mock to call some other method when it receives a given
call.  In my case, I am testing part of a Visitor where the graph it is
visiting has mocks in it.  When the visitor calls =accept()= on a mock, that
mock should call =visitX()= back on the visitor.  There seems to be no trivial
way to specify this on the mocks.

Lesson 3: I built the classes in =com.jeantessier.classreader= with the
assumption that they would read well formed =.class= files.  This makes it hard
to test small portions of the structure in isolation.  All the constructors
take a =DataInputStream= and expect valid bytes on the stream.  Setting up unit
tests is extremely hard.  I cannot create a custom mock by subclassing.  There
are no interfaces for me to implement.  The structure is too complex for jMock
or EasyMock.  I'm stuck.

Action items:

    * Move rendering logic out of =ClassReport.toString()= and =Report.toString()=.
    * Create constructors for =Classfile= and its dependants.
    * Don't rely on =toString()= for rendering logic.

That should make things easier to work with and speed up some of the tests.  I
would be able to build a graph of model objects for the tests instead of
reading dummy =.class= files from disk.

I've started by renaming =ClassReport.toString()= to =ClassReport.render()=.  I
still not completely satisfied with it, but it will do as a stop-gap measure
for now.
