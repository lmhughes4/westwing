Implemented =equals()= and =hashCode()= in subclasses of =ConstantPoolEntry= to
help in discovering API differences.  It started with the need to compare
constant values to detect when they change between versions.  Since those make
up the majority of this hierarchy, I decided to do it all.

One interesting point is when comparing two values of either =Float_info= or
=Double_info=, where I need to compare =float= or =double= values respectively.
I cannot use operator ==== because rounding errors could make it fail when the
values are otherwise the same.  Since Java 1.4, I can use
=Float.compare(float, float)= and =Double.compare(double, double)=, but not in
Java 1.3.  So far, my policy has been to keep the code runnable on a Java 1.3
virtual machine.  I used to do it by compiling the release version with JDK 1.3,
but as of 2004-06-18, I use the =source= and =target= attributes to the
=&lt;javac&gt;= Ant task in =build.xml=.  This way, I only need JDK 1.5 on my
machine.  But this control mechanism does not guard against calling features
that were not in JDK 1.3, like those =compare()= methods.  The compiler compiles
them just fine, and the code runs fine until JarJarDiff hits a float or double
constant that didn't change and it tries to call my new =equals()= method to
verify it.  It then explodes with a =NoSuchMethodError= for either
=Float.compare(float, float)= or =Double.compare(double, double)=.
