Someone came up with some weird behavior in Dependency Finder and
asked me for an explanation.  It turns out to be caused by some
interesting things done by the Java compiler.  I touched upon it back on
[[2004-01-07]], but I'll elaborate further here.

First, suppose you have the following classes =A= and
=B=:

<table><tr>
<td valign="top">
<pre>
    class B {
        void b() {}
    }
    __
    __
    __
    __
    class A extends B {
        void a() {
            b();
        }
    }
</pre>
</td>
<td width="150"
    align="right">
[[../images/AandB.gif]]
</td>
</tr></table>

Now, imagine for a second that we have the following class
=C=:

<table><tr>
<td valign="bottom">

    class C {
        A a = new A();
        void foo() {
            a.b();
        }
    }

</td>
<td width="500"
    align="right">
[[../images/AandBandC.gif]]
</td>
</tr></table>

The compiler resolves the line "=a.b()=" as a call to
method =b()= on object =a= of type
=A=.  The JDK 1.3 compiler will see that method
=b()= is actually defined in superclass =B= of
class =A= and will generate bytecode to call
"_method =b()= in class definition =B=, or one of its superclasses_".

This is fine and dandy as long as nobody overrides =b()=
in subclasses of =B=, like =A= for instance.
Imagine that someone overrides =b()= in =A= but
does not recompile =C=, maybe because this client code was
developed by someone else and the person making the change is unaware
of its existence.  Now =C= will go on calling
"<i>method =b()= in class definition =B=</i>", even though
the instance =a= is of type =A= and now has a new
definition for its method =b()=.  The compiler said "call
the method defined in =B=" and that's what the VM will do.

So the good people at Sun changed the compiler in JDK 1.4 to use the
type of the reference instead of where it thinks the method is located.
The VM will walk the inheritance tree at runtime to find the method.
So in the JDK 1.4-compiled version of =C= even if class
=A= does not override the method =b()=, the
bytecode essentially says to call
"_method =b()= in class definition =A=, or one of its superclasses_".
Now, even if we modify =A= without recompiling =C=, the
method will resolve correctly.

Let's take a closer look back at class =A='s method
=a()=.  In reality, it is calling method =b()=
on the implicit =this= variable, which is of type
=A=.  So if you compile =A= with JDK 1.3, it will
try to call method =b()= in class =B=.  If you
compile it with JDK 1.4, it will try to call method =b()=
in class =A=.

[[../images/A.this.gif]]

Dependency Finder gets its information from the bytecode in the
compiled Java class.  It provides you with an exact rendition of what
the compiler did.  In the case of the code above, compiled with JDK
1.4, it will list a dependency
=A.a()&nbsp;--&gt;&nbsp;A.b()=, even though there may not be
any method =b()= in class =A=.

Now you may ask "Can't Dependency Finder figure it out and assign
the dependency to method =b()= in class =B=?"
The answer is no, it can't.  For starters many dependencies go to
classes that the tool will never see such as classes and features in
external libraries that may not get analyzed, such as
=rt.jar=.  Then, there is the issue of starting to make
assumptions.  I've resisted the temptation to make any assumptions so
far.  I would rather have to tools present an unmodified view of
reality and not run the risk of misleading users with possibly invalid
assumptions.  Even if this means that results look strange from time to
time.

I also had someone else ask me about a launching script for
JarJarDiff on AS/400.  I have never even seen as AS/400 system, so all
I could do was to point them to the current Windows and Unix scripts,
and what it is that the JarJarDiff tool classes do, in the hope that
they are able to fix it for their system.
