I tweaked =CodeDependencyCollector= to process
=new=, =anewarray=, =checkcast=,
=instanceof=, and =multianewarray= opcodes.
It doesn't seem to add any dependencies that were not already
found by just looking at field access and method call instructions,
but maybe this is just a quirk of my code.

I need to adjust the =.bat= files so that they
are no longer tied to my environment.  I'll create a
=DEPENDENCYFINDER_HOME= environment variable,
this way people only need to set that variable to start
using the tools.  Eventually, I could look at some kind of
InstallShield or InstallAnywhere solution.

I also want to create some additional implementations of the
=jt.dependencyfinder.classreader.Visitor=
interface to compute software metrics, such as:

    * number of packages, classes, methods
    * number of classes per package or methods per class
    * number of public, static, or synthetic classes or features (i.e., fields and methods)
    * ...

I could do the same with additional implementations of the
=jt.dependencyfinder.model.Visitor=
interface to compute software metrics, such as:

    * number of outbound dependencies per package, class, or feature
    * number of inbound dependencies per package, class, or feature
    * ...

For these last dependency metrics, the tools should be applicable to
the output of both =DependencyExtractor= and
=DependencyReporter=, so that scoping can be used without
duplicating the functionality in =DependencyReporter=.
