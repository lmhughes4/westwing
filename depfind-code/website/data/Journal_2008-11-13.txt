Back on [[2008-11-03]], I simplified some constructors at the cost of less
useful debug traces.  I was looking at traces from =ClassMetrics= to see how
Dependency Finder was dealing with annotations in the wild and I realized that
echoing only constant pool indices is not very helpful.  I really need to
look up those values in the constant pool and include them in the trace
message.

Found a bug!  It turns out that the constructor for =AnnotationElementValue=
was not passing the =ConstantPool= to its =Annotation=.  Now that the
constructor for =Annotation= calls =getType()= for its debug trace, it forces
a constant pool look up, which exposed the problem.  Hurray for tests!

Since Java 1.2, you can deprecate a programming element with the javadoc tag
=@deprecated=.  It adds a =Deprecated= attribute to the programming element.
Since Java 1.5, you can deprecate a programming element with the runtime
annotation =@Deprecated=.  I wrote a special =Visitor=, named
=DeprecationDetector=, that traverses the =Classfile= structure looking for
either one.  I will use it to rewrite =Deprecatable.isDeprecated()= in
=Classfile= and =Feature_info=.  This is part of a larger effort to reduce
dependencies by parts of the =Classfile= structure upon their containing
structures.

As I was working on =DeprecationDetector=, I realized that =Annotation= did not
expose its =type= property through its interface.  It is odd that I did not
notice it earlier.  And, I must admit, a bit scary.  What else might I have
missed?

As I was trying =ClassReader -xml=, I realized that the elements of the constant
pool have an attribute =id= that gives their position in the pool.  This is
unfortunate since =id= has a very specific meaning in XML.  I should definitely
think of changing it to something more like =index=.
