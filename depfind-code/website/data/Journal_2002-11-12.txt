I worked out the design of a new =TransitiveClosure=
that uses breadth-first search through the dependency graph.
It is not based on =com.jeantessier.dependency.Visitor=
and uses the Strategy pattern to decide how far to go from the
scope, either up to a given path length or unbounded, with
separate strategies for following inbound versus outbound
dependencies.

I also laid out the design for a _scope selector_ to help
with computing transitive closures on non-maximized graphs.  This
will also come in handy for the next item today.

I have also outlined the algorithm for finding the shortest
paths between two groups of nodes, using the engine that computes
transitive closures.  By growing closures from both groups, one
following inbound dependencies and the other following outbound
dependencies, and growing them until I have a non-empty
intersection, I will get a subgraph that contains all the paths
from A to B with minimal length.  I can use the
_scope selector_ described above to select source and sink groups.

I also found out that [[http://sdmagazine.com/][Software Development]]
magazine is taking nominations for its Jolt Awards.
I'm going to submit Dependency Finder.  But they don't want betas, so
I will have to push up my release schedule.  I'll have a very
short beta period and a release in December.  ;-)
