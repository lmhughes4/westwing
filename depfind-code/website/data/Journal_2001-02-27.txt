Added the =CodeIterator= class in the
=jt.dependencyfinder.classreader=
package.  This allows me to traverse bytecode and capture
dependencies originating from methods.  I have yet to figure
out exactly how to use it.  I'm thinking of writing a
new =DependencyCollector= to do all the
collecting, instead of the current two step class then
feature collection.

Added the =Reporter= class in the
=jt.dependencyfinder.model.Visitor=
hierarchy.  This allows me to build a =Node=
graph from the dependency graph which answers queries
such as package-to-package dependencies and the like.
I've adjusted =DependencyReporter= to make
use of this new class.  There are still problems with
displaying scopes of other things than packages, but it
should be easy to solve.

The interfaces to =DependencyExtractor= and
=DependencyReporter= need work to make them
easier to use.

I must fix the deserialization bug in the
=jt.dependencyfinder.classreader.Classfile=
package.

I must also make the whole
=jt.dependencyfinder.classreader.Classfile=
easier to use for general purposes (i.e., Jeff).
