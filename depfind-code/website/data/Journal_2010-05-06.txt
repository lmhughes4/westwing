I got an email today from a user who found a bug in Dependency Finder.  It turns
out that I implemented the null check in =Classfile.isInnerClass()= in the wrong
direction.  I looked for usages of this method but found none.  Not even a test.
The shame.

I also discovered a 2 year old bug report about the access flags for inner
classes.  Given these classes:

    public class Outer {
        private class Inner {}
    }

The bytecode for =Outer= has an access flag of =00000000 00100001=: =ACC_PUBLIC=
and =ACC_SUPER=.  The bytecode for =Inner= has an access flag of
=00000000 00100000=: only =ACC_SUPER= because it is not a public class.  The
=.class= file format does not provide for other class-level visibility levels.
The modifiers of the inner class are covered in the =InnerClass= part of
=InnerClasses_attribute=.  The bytecode for both =Outer= and =Inner= include
identical copies of =InnerClass= with an access flag of =00000000 00000010=:
=ACC_PRIVATE=.

The bug report was trying to copy the =InnerClass= access flag to the
=Classfile= instance.  This will not work because the meaning of each bit is
different between the two classes.  The interfaces in
=com.jeantessier.classreader= are meant to provide an accurate representation of
the information in the bytecode.  It is meant for people who think in terms of
the bytecode, not people who think in terms of the Java language.  There is a
subtle difference.  If you're dealing with an inner class, you have to get its
access level from the enclosed =InnerClasses= attribute.

To work on this problem, I fired up a =grails shell= in a Grails application
where I had copied =DependencyFinder.jar=.  It was really cool to simply use
scripting to manipulate data.  Java has so much boilerplate code when compared
to Groovy.

I fixed the link to JSR 202 on the Resources page.  The latest =.class= file
specification includes full description of the =StackMap= element.  At last.
