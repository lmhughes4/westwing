Came upon an interesting consequence of using JDK 1.5+.  Take this simple
class:

    package test;
    &nbsp;
    public class Test {
        public void test() {
            Class[] array = new Class[1];
            array[0] = String.class;
        }
    }

If I compile it using JDK 1.4 and then run =DependencyExtractor= on it, I get:

    java.lang *
        Class *
            <-- test.Test.class$(java.lang.String)
            <-- test.Test.class$java$lang$String
            <-- test.Test.test()
            forName(java.lang.String) *
                <-- test.Test.class$(java.lang.String)
        ClassNotFoundException *
            <-- test.Test.class$(java.lang.String)
            getMessage() *
                <-- test.Test.class$(java.lang.String)
        NoClassDefFoundError *
            NoClassDefFoundError(java.lang.String) *
                <-- test.Test.class$(java.lang.String)
        Object *
            <-- test.Test
            Object() *
                <-- test.Test.Test()
        String *
            <-- test.Test.class$(java.lang.String)
            <-- test.Test.test()
    test
        Test
            --> java.lang.Object *
            Test()
                --> java.lang.Object.Object() *
            class$(java.lang.String)
                --> java.lang.Class *
                --> java.lang.Class.forName(java.lang.String) *
                --> java.lang.ClassNotFoundException *
                --> java.lang.ClassNotFoundException.getMessage() *
                --> java.lang.NoClassDefFoundError.NoClassDefFoundError(java.lang.String) *
                --> java.lang.String *
                <-- test.Test.test()
            class$java$lang$String
                --> java.lang.Class *
                <-- test.Test.test()
            test()
                --> java.lang.Class *
                --> java.lang.String *
                --> test.Test.class$(java.lang.String)
                --> test.Test.class$java$lang$String

The compiler created synthetic features to store the reference to
=String.class=.  All this machinery adds a lot of complexity to the dependency
graph.

In JDK 1.5, they expanded the VM instructions to handle this case and now the
compiler can generate much simpler bytecode.  If I compile the class with JDK
1.5 and then run =DependencyExtractor= on it, I now get:

    java.lang *
        Class *
            <-- test.Test.test()
        Object *
            <-- test.Test
            Object() *
                <-- test.Test.Test()
    test
        Test
            --> java.lang.Object *
            Test()
                --> java.lang.Object.Object() *
            test()
                --> java.lang.Class *

Notice the conspicuous absence of =java.lang.String= from the graph.  This is
because Dependency Finder does not understand the Java 1.5 features of the
bytecode, yet.

I make a quick change to =CodeDependencyCollector= so it could at least
account for the new behavior of two VM instructions (=ldc= and =ldc_w=) in
Java 1.5.  With this change, =DependencyExtractor= now gives this much simpler,
yet accurate graph:

    java.lang *
        Class *
            <-- test.Test.test()
        Object *
            <-- test.Test
            Object() *
                <-- test.Test.Test()
        String *
            <-- test.Test.test()
    test
        Test
            --> java.lang.Object *
            Test()
                --> java.lang.Object.Object() *
            test()
                --> java.lang.Class *
                --> java.lang.String *

While working on =ldc= and =ldc_w= handling, I also realized the XML output for
instructions wasn't descriptive enough to let me know which entry they are
referencing in the constant pool.  In the case I was looking at, the
instruction could point to a =class%5Finfo= structure or to a =Utf8%5Finfo=
structure and I couldn't tell which one it was.  So I added an =index=
attribute to the =&lt;instruction&gt;= tag so whoever reads the file can see
exactly what the instruction is referencing.

Someone contacted me with an issue regarding closures.  Apparently, filtering
is not working correctly.  I tried to recreate the problem, but it worked just
fine for me.  These kinds of bugs are always annoying to work on since I cannot
reproduce it to examine it.
