I don't know what I was thinking when I first wrote =VisitorDecorator=.  It was
calling the counterpart method on the delegate directly instead of using double
dispatch like I originally wanted to.  I fixed the tests, mocking more things
along the way, and then fixed the code.

Cleaning up the interface, I added =traverseInbound()= and =traverseOutbound()=
to the =Visitor= interface.  Almost all implementations already had them already
and the others ended up being no-ops.

I wrote a =BasicTraversal= visitor that uses a =TraversalStrategy= to do some
filtering, but I was not happy with it.  It was not clear where scope versus
filter selections should happen.  I felt like I needed a separate class to do
the scoping and the filtering, but the composition of decorators would become
non-trivial.  Finally, I found a way to make it work and I got =BasicTraversal=
and =SelectiveVisitor= to be just the way I wanted.

I changed my IntelliJ IDEA configuration to use JDK 1.6 on my MacBook Pro.  My
shell is still stuck on JDK 1.5.  I wonder how they will interact, when I happen
to compile in IDEA and try to run some tool from the command line.
