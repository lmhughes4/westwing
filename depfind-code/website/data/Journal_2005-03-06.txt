Worked on better integration between =Monitor= and
=DependencyFinder= in the GUI.

Someone raised an interesting problem.  Say class
=MySuperClass= defines methods =m1()= and
=m2()= where =m1()= calls =m2()=,
introducing a dependency =m1()&nbsp;--&gt;&nbsp;m2()=.
Now imagine a subclass =SomeSubclass= that overrides
=m2()= and defines a method =m0()= that calls
=m1()=.  Because =m1()= depends on
=m2()=, which is redefined in =SomeSubclass=,
=m0()= really depends on =SomeSubclass.m2()=
and not =MySuperclass.m2()=.  But the dependency graph
does not know about this.  It looks at all dependencies from a very
narrow context and does not see the bigger picture.  This is
unfortunate, but it will stay that way for the foreseeable future.  It
would take a *lot* of work to have Dependency Finder walk through
the program's logic, almost simulating a program run, and I just don't
have the resources to get into it.
