Thanks to Jonathan Doughty, who donated a Unix shell script for
launching the tools in Dependency Finder.  I haven't had the time to
look at it yet, but I am curious about how he got around to doing it.

Incidentally, for those who wonder, the main reason I don't have a
Unix version of the scripts is not that I don't know how to write them,
but it is that I don't have a convenient environment to build and to
test them.  I was thinking of Bourne shell scripts
(=/bin/sh=) that could discover
=DEPENDENCYFINDER_HOME= from their invocation path and figure
out the exact name of the class to invoke from their invocation name.
I have a prototype on the SourceForge shell server that dates back to
[[2003-01-23]], but I cannot build a =.tar.gz= file with symbolic
links in it on my Windows machine, and I don't want to distribute my
build process either.  And working via that dreadful SSH terminal is out
of the question.  I need three or four launchers to handle the various
patterns in scripts, and symbolic links to create all the scripts.
Since I cannot create the symbolic links at build-time on my Windows
machine, I might have to write a quick install script that creates all
the symbolic links to each launcher.  Running it would become part of
the installation process.  Jonathan Doughty took a slightly different
approach, so I look forward to comparing what he did with what I had in
mind.  Maybe I can get a patch together while we wait for the next
release...

I had put the wrong patch file in patch #776104.  I was able to
recreate the correct file and upload it to SourceForge.  Luckily, this
patch was very minor and did not address anything that was broken; it
simply removed redundant calls to
=java.io.PrintWriter.flush()=.  I actually considered
removing the patch altogether and keep the fix for a release.  Maybe I
will change my mind again at some point in the future.  :-)
