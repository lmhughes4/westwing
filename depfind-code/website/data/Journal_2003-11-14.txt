Someone asked me about a tool to do jar-to-jar dependencies.  I've
been thinking for some time now about a tool to list dependencies
between JAR files, but it hasn't gone beyond being just a thought,
yet.

I was about to say that if the project is small enough, you can
always do the jar-to-jar analysis manually with the help of some
package-to-package reports.  I was going to show an example using
Dependency Finder, but even this small example ends up being quite
big.  In the end, I don't think this would work on anything beyond
a trivial example.

For example, if I run this against Dependency Finder, I get:

    % DependencyExtractor -xml -out df.xml DependencyFinder.jar
    % p2p -scope-includes /^com.jeantessier/   \
          -filter-excludes /^java/             \
          -filter-excludes /^com.jeantessier/  \
          df.xml
    com.jeantessier.classreader
        --> org.apache.log4j
        --> org.apache.oro.text.perl
    com.jeantessier.commandline
    com.jeantessier.dependency
        --> org.apache.log4j
        --> org.apache.oro.text
        --> org.apache.oro.text.perl
        --> org.xml.sax
        --> org.xml.sax.helpers
    com.jeantessier.dependencyfinder
        --> org.apache.log4j
    com.jeantessier.dependencyfinder.ant
        --> org.apache.tools.ant
        --> org.apache.tools.ant.types
        --> org.xml.sax
    com.jeantessier.dependencyfinder.cli
        --> org.apache.log4j
    com.jeantessier.dependencyfinder.gui
        --> org.apache.log4j
        --> org.apache.oro.text.perl
        --> org.xml.sax
    com.jeantessier.diff
        --> org.apache.log4j
        --> org.apache.oro.text.perl
    com.jeantessier.metrics
        --> org.apache.log4j
        --> org.apache.oro.text
        --> org.apache.oro.text.perl
        --> org.xml.sax
        --> org.xml.sax.helpers
    com.jeantessier.text
        --> org.apache.oro.text
        --> org.apache.oro.text.regex

There are a number of problems:

    1 There are quite a few packages and a lot of repeated information.  If some JARs are quite obvious, like =ant.jar=, =jakarta-oro.jar=, and =log4j.jar=, it is not clear where "=org.xml.*=" would come from.  I'm thinking that the JVM would probably get them from its =BOOTCLASSPATH=.
    1 It the tool analyzes =A.jar=, it will find dependencies on packages outside of =A.jar=.  It would then be quite difficult, maybe impossible, to find out in which JARs these extra packages are located.  The tool would need a mapping of packages to JAR;  this mapping would preferably be generated automatically by some other tool.
    1 It is possible to put two classes of a package in two separate JARs.  This means that the tool would have to work at the class level instead of the package level.

I'm sorry there is no obvious answer to this problem, but I will
keep thinking about it.  In the meantime, there are some tools on the
Internet that track jar-to-jar dependencies.  Just google it.  :-)
