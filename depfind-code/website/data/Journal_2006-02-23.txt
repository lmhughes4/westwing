Played a little with _smarter_ code difference determination, using the
=CodeIterator= and =Instruction= classes.  =Instruction= is not tied to its
=Classfile=, so it cannot access the constant pool and lookup indices in the
bytecode.  I will have to tie it tighter to the object tree if I want it to
compare the actual parameter to an instruction when deciding if something is
different or not.

I found something interesting.  In the compiled code I received from a user
yesterday, there is and =ldc_w= instruction that points to a
=CONSTANT_class= entry in the constant pool.  Now,
[[http://java.sun.com/docs/books/vmspec/2nd-edition/html/Instructions2.doc8.html][the spec clearly says]]
it has to point to a either an =int=, a =float=, or a =string=.  I wonder if
maybe they used a non-compliant compiler or something.

Instrumented more debug info in the processing of bytecode from methods, when
reading it and when comparing it in =JarJarDiff=.

Did a massive refactoring to use the new Java 5 =for()= loop in
=com.jeantessier.classreader=, which meant using specialized versions of the
Collections API.  I'm not madly in love with generics, but the new =for()= is
really cool.
