Finished including annotations being used when compiling class metrics.  I used
some features of the Guava library to convert a set of =Annotation= instances to
their type string and remove duplicates.  It let me write the transformation in
a more functional way, but Java is so very verbose compared to Groovy.

Here is the code in Java:

    Iterable&lt;String&gt; annotationTypes = Sets.newTreeSet(Collections2.transform(metrics.getUsedAnnotations(), new Function&lt;Annotation, String&gt;() {
        public String apply(Annotation annotation) {
            return annotation.getType();
        }
    }));

And the equivalent in Groovy:

    def annotationTypes = metrics.usedAnnotations.collect*.type as SortedSet

The nice thing with Groovy is that since it's a JVM language, I can just put
=DependencyFinder.jar= on my =CLASSPATH= and run that line in some Groovy code.

Upgraded the following development components:

<blockquote>
<table>
    <tr>
        <td>Guava</td>
        <td>:</td>
        <td>r06</td>
        <td>-></td>
        <td>r08</td>
    </tr>
</table>
</blockquote>
