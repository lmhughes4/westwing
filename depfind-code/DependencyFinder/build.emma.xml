<project name="Emma" default="all" basedir=".">

    <description>
        Code coverage with Emma for Dependency Finder
    </description>

    <property environment="env"/>

    <path id="emma.lib" >
        <fileset dir="${env.EMMA_HOME}/lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>

    <target name="init">
        <!-- root directory for the example source code: -->
        <property name="src.dir" value="src"/>
        <property name="tests.dir" value="tests"/>
        <property name="fit.dir" value="fit"/>

        <!-- javac class output directory: -->
        <property name="out.dir" value="classes"/>
        <mkdir dir="${out.dir}"/>

        <!-- class coverage output directory: -->
        <property name="coverage.dir" value="emma"/>
        <mkdir dir="${coverage.dir}"/>

        <!-- EMMA instr class output directory: -->
        <property name="out.instr.dir" value="${coverage.dir}/outinstr"/>
        <mkdir dir="${out.instr.dir}"/>

        <!-- class coverage output directory: -->
        <property name="reports.dir" value="reports"/>
        <property name="emma.reports.dir" value="${reports.dir}/emma"/>
        <mkdir dir="${emma.reports.dir}"/>

        <path id="run.classpath">
            <pathelement location="${out.dir}"/>
            <pathelement location="classes"/>
            <fileset dir="lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${env.JUNIT_HOME}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${env.JMOCK_HOME}">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${env.CATALINA_HOME}">
                <include name="bin/*.jar"/>
                <include name="lib/*.jar"/>
            </fileset>
            <fileset dir="${env.WEBWORK_HOME}">
                <include name="webwork-*.jar"/>
                <exclude name="webwork-src*.jar"/>
                <include name="lib/default/*.jar"/>
            </fileset>
            <pathelement location="${env.FITLIBRARY_HOME}/fitlibraryRunner.jar"/>
            <fileset dir="${env.HTTPUNIT_HOME}">
                <include name="**/jars/*.jar"/>
                <include name="**/lib/*.jar"/>
            </fileset>
        </path>
    </target>

    <target name="tests.compile">
        <ant antfile="build.test.xml" target="compile" inheritAll="false"/>
    </target>

    <target name="tests.clean">
        <ant antfile="build.test.xml" target="clean" inheritAll="false"/>
    </target>

    <target name="all" depends="clean, instrument, run, report"
            description="Makes a clean compile and runs code coverage analysis"/>

    <target name="clean" depends="init, tests.clean"
            description="Removes all produced files">
        <delete dir="${coverage.dir}"
                includeEmptyDirs="true"
                verbose="true"/>
        <delete dir="${emma.reports.dir}"
                includeEmptyDirs="true"
                verbose="true"/>
    </target>

    <target name="instrument" depends="init, tests.compile"
            description="Instruments the bytecode">
        <emma>
            <instr instrpath="${out.dir}"
                   destdir="${out.instr.dir}"
                   metadatafile="${coverage.dir}/metadata.emma"
                   merge="true">
                <filter includes="com.jeantessier.*"
                        excludes="*.TestAll"/>
            </instr>
        </emma>
    </target>

    <target name="run" depends="init"
            description="Runs the tests">
        <junit fork="true">
            <formatter type="plain" usefile="no"/>
            <test name="TestAll"/>
            <classpath>
                <pathelement location="${out.instr.dir}"/>
                <path refid="run.classpath"/>
                <path refid="emma.lib"/>
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
        </junit>

        <junit fork="true">
            <formatter type="plain" usefile="no"/>
            <test name="com.jeantessier.fit.FitTestSuite"/>
            <classpath>
                <pathelement location="${out.instr.dir}"/>
                <path refid="run.classpath"/>
                <path refid="emma.lib"/>
            </classpath>
            <jvmarg value="-Demma.coverage.out.file=${coverage.dir}/coverage.emma"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>
        </junit>
    </target>

    <target name="report" depends="init"
            description="Produces the coverage reports">
        <emma>
            <report>
                <fileset dir="${coverage.dir}">
                    <include name="*.emma"/>
                </fileset>
                <sourcepath>
                    <pathelement location="${src.dir}"/>
                    <pathelement location="${tests.dir}"/>
                    <pathelement location="${fit.dir}"/>
                </sourcepath>
                <txt outfile="${emma.reports.dir}/coverage.txt"/>
                <html outfile="${emma.reports.dir}/coverage.html"/>
            </report>
        </emma>
    </target>

</project>
